#!/usr/bin/env bun

// @ts-check

import { formatConv } from './format.js'
import { rl } from './io.js'
import { answer_chain } from './commandr.js'
import { handle_non_interactive } from './nonInteractive.js'
import 'colors'


/**
 * handle quiting with a success status code
 */
function end() {
  rl.close()
  console.log('\n', 'Goodbye!'.gray)
  process.exit(0)
}

// check non interactive quetion and handle it
if (process.argv.length > 2) {
  let ans = await handle_non_interactive(process.argv)
  console.log(ans.blue)
  end()
}

/**
 * Runs the chat CLI application to test the bot response.
 *
 * @returns {Promise<void>} A promise that resolves when the chat CLI application is finished.
 */
async function run() {
  const history = []

  /**
   * Asks a question to the user and processes the response.
   */
  async function ask() {
    rl.question('You: ', async (msg) => {
      if (msg.toLocaleLowerCase() === 'exit') {
        end()
      } else {
        try {
          const response = await answer_chain.invoke({
            question: msg,
            history: formatConv(history),
          })
          history.push(msg)
          history.push(response)
          console.log(response.blue)
        } catch (error) {
          console.error('Error:', error.message)
        }
        ask() // Call ask() again to wait for the next question
      }
    })
  }

  // Start the asking loop
  ask()
}

// Register signal handlers
rl.on('SIGINT', end)
rl.on('SIGTERM', end)
rl.on('SIGQUIT', end)
rl.on('SIGTSTP', end)

// Run the application
run()
